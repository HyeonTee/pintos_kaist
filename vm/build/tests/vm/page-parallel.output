Kernel command line: -q -f put page-parallel put child-linear run page-parallel
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  209,510,400 loops/s.
hd0:0: detected 329 sector (164 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 209 sector (104 kB) disk, model "QEMU HARDDISK", serial "QM00003"
hd1:1: detected 8,064 sector (3 MB) disk, model "QEMU HARDDISK", serial "QM00004"
Formatting file system...done.
Boot complete.
Putting 'page-parallel' into the file system...
Putting 'child-linear' into the file system...
Executing 'page-parallel':
(page-parallel) begin
(page-parallel) wait for child 0
child-linear: exit(66)
(page-parallel) wait for child 1
child-linear: exit(-1)
Kernel PANIC at ../../threads/palloc.c:321 in palloc_free_multiple(): assertion `bitmap_all (pool->used_map, page_idx, page_cnt)' failed.
Call stack: 0x8004217ec2 0x800420b824 0x800421bb36 0x80042076fb 0x800421d12c 0x800421cc6d 0x8004208fca 0x80042093e8 0x800421bbe2 0x800421bb8e 0x80042076fb 0x800421d12c 0x800421ce1e 0x800421cce2 0x400ef7.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 88 ticks
Thread: 34 idle ticks, 32 kernel ticks, 22 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 143 reads, 456 writes
hd1:0: 209 reads, 0 writes
hd1:1: 0 reads, 0 writes
Console: 1572 characters output
Key